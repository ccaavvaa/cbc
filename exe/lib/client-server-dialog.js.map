{"version":3,"sources":["../../src/lib/client-server-dialog.ts"],"names":[],"mappings":"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","file":"client-server-dialog.js","sourcesContent":["export type RequestResolver<Request, Response> = (data: Request) => Promise<Response>;\r\nexport interface ICallbackClientSettings<Request, Response> {\r\n    isResponse: (data: Request | Response) => data is Response;\r\n    getRequestId: (data: Request | Response) => number;\r\n    setRequestId(data: Request, requestId: number): void;\r\n}\r\nclass PromiseResolver<Request, Response> {\r\n    public requestId: number;\r\n    public resolve: (value?: Request | Response | PromiseLike<Request | Response>) => void;\r\n    public reject: (reason?: any) => void;\r\n}\r\n\r\nexport class ClientServerDialog<Request, Response> {\r\n    private requestPromiseCanceled: boolean;\r\n    private clientExecutor: PromiseResolver<Request, Response>;\r\n    private serverExecutor: PromiseResolver<Request, Response>;\r\n    private lastId = 0;\r\n\r\n    private requestPromise: Promise<Response>;\r\n    public get isWaitingClient(): boolean {\r\n        return this.serverExecutor ? true : false;\r\n    }\r\n\r\n    constructor(public readonly settings: ICallbackClientSettings<Request, Response>) {\r\n\r\n    }\r\n    public queryClient(request: Request): Promise<Response> {\r\n        if (this.isWaitingClient) {\r\n            return Promise.reject(new Error(`Allready waiting for client response ${this.lastId}`));\r\n        }\r\n        const requestId = ++this.lastId;\r\n        this.settings.setRequestId(request, requestId);\r\n        return new Promise<Response>((resolve, reject) => {\r\n            this.serverExecutor = {\r\n                resolve,\r\n                reject,\r\n                requestId,\r\n            };\r\n            const currentResolver = this.clientExecutor;\r\n            this.clientExecutor = null;\r\n            currentResolver.resolve(request);\r\n        });\r\n    }\r\n\r\n    public async exchange(\r\n        data: Request | Response,\r\n        requestResolver?: RequestResolver<Request, Response>\r\n    ): Promise<Request | Response> {\r\n        if (this.settings.isResponse(data)) {\r\n            const requestId = this.settings.getRequestId(data);\r\n            if (!this.isWaitingClient\r\n                || !this.serverExecutor\r\n                || this.serverExecutor.requestId !== requestId) {// out of band response\r\n                return Promise.reject('Out of band response');\r\n            }\r\n            const serverExecutor = this.serverExecutor;\r\n            this.serverExecutor = null;\r\n            const p = new Promise<Request | Response>((resolve, reject) => {\r\n                this.clientExecutor = {\r\n                    resolve,\r\n                    reject,\r\n                    requestId: undefined,\r\n                };\r\n            });\r\n            serverExecutor.resolve(data);\r\n            return p;\r\n        }\r\n        // request\r\n        let clientPromise = new Promise<Response>((resolve, reject) => {\r\n            this.clientExecutor = {\r\n                resolve,\r\n                reject,\r\n                requestId: undefined,\r\n            };\r\n        });\r\n\r\n        if (this.isWaitingClient) { // out of band request\r\n            const serverExecutor = this.serverExecutor;\r\n            const oldRequestPromise = this.requestPromise;\r\n\r\n            this.serverExecutor = null;\r\n            this.requestPromise = null;\r\n            this.requestPromiseCanceled = true;\r\n            serverExecutor.reject('Out of band request');\r\n            if (oldRequestPromise) {\r\n                await oldRequestPromise;\r\n            }\r\n        }\r\n\r\n        this.requestPromiseCanceled = false;\r\n        this.requestPromise = requestResolver(data);\r\n        this.requestPromise.then((r) => {\r\n            if (!this.requestPromiseCanceled) {\r\n                const currentResolver = this.clientExecutor;\r\n                if (currentResolver) {\r\n                    currentResolver.resolve(r);\r\n                }\r\n            }\r\n        });\r\n        return clientPromise;\r\n    }\r\n}\r\n"]}