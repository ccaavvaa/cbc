{"version":3,"sources":["../../src/lib/server.ts"],"names":[],"mappings":"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","file":"server.js","sourcesContent":["class PromiseResolver<Request, Response> {\r\n    public requestId: number;\r\n    public resolve: (value?: Request | Response | PromiseLike<Request | Response>) => void;\r\n    public reject: (reason?: any) => void;\r\n}\r\n\r\nexport type RequestResolver<Request, Response> = (data: Request) => Promise<Response>;\r\nexport interface ICallbackClientSettings<Request, Response> {\r\n    isResponse: (data: Request | Response) => data is Response;\r\n    getRequestId: (data: Request | Response) => number;\r\n    setRequestId(data: Request, requestId: number): void;\r\n}\r\n\r\nexport class CallbackClient<Request, Response> {\r\n    private executors: Array<PromiseResolver<Request, Response>> = [];\r\n    private nextId = 1;\r\n\r\n    constructor(public readonly settings: ICallbackClientSettings<Request, Response>) {\r\n\r\n    }\r\n\r\n    public response(data: Response): Promise<Request | Response> {\r\n        return new Promise<Request | Response>((resolve, reject) => {\r\n            this.executors.push({\r\n                resolve,\r\n                reject,\r\n                requestId: undefined,\r\n            });\r\n            const currentResolver = this.executors.shift();\r\n            const requestId = this.settings.getRequestId(data);\r\n            if (currentResolver.requestId !== requestId) {\r\n                currentResolver.reject(\r\n                    new Error(`unexpected request id!. Expected ${currentResolver.requestId}, received ${requestId}`)\r\n                );\r\n            } else {\r\n                currentResolver.resolve(data);\r\n            }\r\n        });\r\n\r\n    }\r\n    public execute(\r\n        data: Request | Response,\r\n        requestResolver?: RequestResolver<Request, Response>\r\n    ): Promise<Request | Response> {\r\n        if (this.settings.isResponse(data)) {\r\n            return new Promise<Request | Response>((resolve, reject) => {\r\n                this.executors.push({\r\n                    resolve,\r\n                    reject,\r\n                    requestId: undefined,\r\n                });\r\n                const currentResolver = this.executors.shift();\r\n                currentResolver.resolve(data);\r\n            });\r\n        } else {\r\n            return requestResolver ?\r\n                requestResolver(data) :\r\n                Promise.reject(new Error('request resolver is not defined'));\r\n        }\r\n    }\r\n    public queryClient(request: Request): Promise<Response> {\r\n        const requestId = this.nextId++;\r\n        this.settings.setRequestId(request, requestId);\r\n        return new Promise<Response>((resolve, reject) => {\r\n            this.executors.push({\r\n                resolve,\r\n                reject,\r\n                requestId,\r\n            });\r\n            const currentResolver = this.executors.shift();\r\n            currentResolver.resolve(request);\r\n        });\r\n    }\r\n    public process(\r\n        data: Request | Response,\r\n        requestResolver?: RequestResolver<Request, Response>\r\n    ): Promise<Request | Response> {\r\n        const responsePromise = new Promise<Request | Response>((resolve, reject) => {\r\n            this.executors.push({\r\n                resolve,\r\n                reject,\r\n                requestId: this.settings.getRequestId(data),\r\n            });\r\n            this.execute(data, requestResolver)\r\n                .then((r) => {\r\n                    const currentResolver = this.executors.shift();\r\n                    currentResolver.resolve(r);\r\n                });\r\n        });\r\n        return responsePromise;\r\n    }\r\n}\r\n"]}