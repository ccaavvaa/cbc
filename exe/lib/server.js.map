{"version":3,"sources":["../../src/lib/server.ts"],"names":[],"mappings":";;AAEA,iCAA+B;AAG/B;CAGC;AAED;IAAA;QACY,cAAS,GAAsB,EAAE,CAAC;QAClC,WAAM,GAAG,CAAC,CAAC;IAoDvB,CAAC;IAlDU,KAAK,CAAC,OAAO,CAAC,IAAU;QAC3B,EAAE,CAAC,CAAC,YAAK,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,QAAQ,GAAa;gBACvB,IAAI,EAAE,IAAI,CAAC,KAAK;aACnB,CAAC;YACF,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC7B,MAAM,WAAW,GAAG;oBAChB,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE;oBACjB,KAAK,EAAE,IAAI,CAAC,KAAK;iBACpB,CAAC;gBACF,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;gBACtD,EAAE,CAAC,CAAC,SAAS,CAAC,SAAS,KAAK,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;oBACzC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC;oBACxB,QAAQ,CAAC,IAAI,GAAG,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC;gBAC3C,CAAC;gBACD,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,GAAG,GAAG,GAAG,SAAS,CAAC,IAAI,CAAC;YACzD,CAAC;YACD,MAAM,CAAC,QAAQ,CAAC;QACpB,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACzC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;oBAChB,OAAO;oBACP,MAAM;iBACT,CAAC,CAAC;gBACH,MAAM,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;gBAC/C,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAClC,CAAC,CAAC,CAAC;QACP,CAAC;IACL,CAAC;IACM,WAAW,CAAC,OAAgB;QAC/B,MAAM,CAAC,IAAI,OAAO,CAAW,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC7C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;gBAChB,OAAO;gBACP,MAAM;aACT,CAAC,CAAC;YACH,MAAM,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YAC/C,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACP,CAAC;IACM,OAAO,CAAC,IAAU;QACrB,MAAM,eAAe,GAAG,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC1D,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;YACzC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;iBACb,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;gBACR,MAAM,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;gBAC/C,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,eAAe,CAAC;IAC3B,CAAC;CACJ;AAtDD,wBAsDC","file":"server.js","sourcesContent":["import { Request } from './request';\r\nimport { Response } from './response';\r\nimport { Tools } from './util';\r\n\r\nexport type Data = Request | Response;\r\nclass PromiseResolver {\r\n    public resolve: (value?: Data | PromiseLike<Data>) => void;\r\n    public reject: (reason?: any) => void;\r\n}\r\n\r\nexport class Server {\r\n    private executors: PromiseResolver[] = [];\r\n    private nextId = 1;\r\n\r\n    public async execute(data: Data): Promise<Data> {\r\n        if (Tools.objectIsRequest(data)) {\r\n            const response: Response = {\r\n                data: data.query,\r\n            };\r\n            if (data.query.startsWith('q')) {\r\n                const clientQuery = {\r\n                    id: this.nextId++,\r\n                    query: data.query,\r\n                };\r\n                const queryData = await this.queryClient(clientQuery);\r\n                if (queryData.requestId !== clientQuery.id) {\r\n                    response.isError = true;\r\n                    response.data = 'err ' + response.data;\r\n                }\r\n                response.data = response.data + ':' + queryData.data;\r\n            }\r\n            return response;\r\n        } else {\r\n            return new Promise<Data>((resolve, reject) => {\r\n                this.executors.push({\r\n                    resolve,\r\n                    reject,\r\n                });\r\n                const currentResolver = this.executors.shift();\r\n                currentResolver.resolve(data);\r\n            });\r\n        }\r\n    }\r\n    public queryClient(request: Request): Promise<Response> {\r\n        return new Promise<Response>((resolve, reject) => {\r\n            this.executors.push({\r\n                resolve,\r\n                reject,\r\n            });\r\n            const currentResolver = this.executors.shift();\r\n            currentResolver.resolve(request);\r\n        });\r\n    }\r\n    public process(data: Data): Promise<Data> {\r\n        const responsePromise = new Promise<Data>((resolve, reject) => {\r\n            this.executors.push({ resolve, reject });\r\n            this.execute(data)\r\n                .then((r) => {\r\n                    const currentResolver = this.executors.shift();\r\n                    currentResolver.resolve(r);\r\n                });\r\n        });\r\n        return responsePromise;\r\n    }\r\n}\r\n"]}